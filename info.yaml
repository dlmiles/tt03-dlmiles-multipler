--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - top_mulu_x2y2.v
    - mulu_x2y2.v
    - halfadder.v
  top_module:  "top_mulu_x2y2"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Darryl L. Miles"
  title:        "TT03 Multiplier"
  language:     "Verilog"
  description:  "Utilize the project mm^2 area as much as possible for the purpose of digital multiplication"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Demostrate various multiply methods that exist to show what is possible on a small scale and experiment and observe characteristics.

      The final selected design for TT03 will utilize the standard primitives to fill the area as much as possible to achieve the widest multiplier.
      
      The goal in the future, after TT03 would be to sequeeze more than that.

      Asking the questions?
        Can we paint our own primitives that optimize some dimenstion, for example PPA, for a given configuration: unsigned, signed,
         X width == Y width, X width != Y width.
        Then can we do this with some kind of automation?
         i.e. have a toolkit to specify parameters and have it construct optimized GDS for this one purpose.
         This would be gate shape, sub-block shape, to achieve layout density, tuned for the fab process.
        Can we use AI to do any of this ?
          Can we feed DRC (Design Rule Constraints) into an AI for this specific process and have it work
           out a theoretical better than we have GDS layout ?

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Feed the input with X and Y multiplicand, observe the output product P on the output, almost immediately* (as the physics allows), or just wait for the next clock cycle :).
      input[0] = CLK
      input[1] = RST (reserved at this time, and not used as the project is 100&percent; combinational logic
      input[?:2] = X
      input[?:?] = Y
      output[?:0] = P
      
      * - The speed of light may vary in your universe, please check the universe user manual.

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - x_0
    - x_1
    - y_0
    - y_1
    - none
    - none
# A description of what the outputs do
  outputs:
    - p_0
    - p_1
    - p_2
    - p_3
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "multiplier"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
